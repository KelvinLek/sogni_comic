import AccountApi from './Account';
import CurrentAccount from './Account/CurrentAccount';
import ApiClient, { ApiError } from './ApiClient';
import { SupernetType } from './ApiClient/WebSocketClient/types';
import { Logger, LogLevel } from './lib/DefaultLogger';
import ProjectsApi from './Projects';
import Job, { JobStatus } from './Projects/Job';
import Project, { ProjectStatus } from './Projects/Project';
import { AvailableModel, ProjectParams, Scheduler, TimeStepSpacing } from './Projects/types';
import StatsApi from './Stats';
import ErrorData from './types/ErrorData';
import { TokenType } from './types/token';
export type { AvailableModel, ErrorData, JobStatus, Logger, LogLevel, ProjectParams, ProjectStatus, Scheduler, SupernetType, TimeStepSpacing, TokenType };
export { ApiError, CurrentAccount, Job, Project };
export interface SogniClientConfig {
    /**
     * The application ID string. Must be unique, multiple connections with the same ID will be rejected.
     */
    appId: string;
    /**
     * Override the default REST API endpoint
     * @internal
     */
    restEndpoint?: string;
    /**
     * Override the default WebSocket API endpoint
     * @internal
     */
    socketEndpoint?: string;
    /**
     * Disable WebSocket connection. Useful for testing or when WebSocket is not needed.
     * Note that many may not work without WebSocket connection.
     * @experimental
     * @internal
     */
    disableSocket?: boolean;
    /**
     * Which network to use after logging in. Can be 'fast' or 'relaxed'
     */
    network: SupernetType;
    /**
     * Logger to use. If not provided, a default console logger will be used
     */
    logger?: Logger;
    /**
     * Log level to use. This option is ignored if a logger is provided
     * @default 'warn'
     **/
    logLevel?: LogLevel;
    /**
     * If true, the client will connect to the testnet. Ignored if jsonRpcUrl is provided
     */
    testnet?: boolean;
}
export declare class SogniClient {
    account: AccountApi;
    projects: ProjectsApi;
    stats: StatsApi;
    apiClient: ApiClient;
    private constructor();
    get currentAccount(): CurrentAccount;
    /**
     * Create client instance, with default configuration
     * @param config
     */
    static createInstance(config: SogniClientConfig): Promise<SogniClient>;
}
