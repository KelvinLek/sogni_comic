"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ApiClient_1 = require("../ApiClient");
const TypedEventEmitter_1 = __importDefault(require("./TypedEventEmitter"));
class RestClient extends TypedEventEmitter_1.default {
    constructor(baseUrl, auth, logger) {
        super();
        this.baseUrl = baseUrl;
        this._auth = auth;
        this._logger = logger;
    }
    get auth() {
        return this._auth;
    }
    formatUrl(relativeUrl, query = {}) {
        const url = new URL(relativeUrl, this.baseUrl);
        Object.keys(query).forEach((key) => {
            url.searchParams.append(key, query[key]);
        });
        return url.toString();
    }
    request(url_1) {
        return __awaiter(this, arguments, void 0, function* (url, options = {}) {
            const token = yield this.auth.getToken();
            return fetch(url, Object.assign(Object.assign({}, options), { headers: Object.assign(Object.assign({}, (options.headers || {})), (token ? { Authorization: token } : {})) })).then((r) => this.processResponse(r));
        });
    }
    processResponse(response) {
        return __awaiter(this, void 0, void 0, function* () {
            let responseData;
            try {
                responseData = yield response.json();
            }
            catch (e) {
                this._logger.error('Failed to parse response:', e);
                throw new Error('Failed to parse response');
            }
            if (!response.ok) {
                throw new ApiClient_1.ApiError(response.status, responseData);
            }
            return responseData;
        });
    }
    get(path, query = {}) {
        return this.request(this.formatUrl(path, query), query);
    }
    post(path, body = {}) {
        return this.request(this.formatUrl(path), {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });
    }
}
exports.default = RestClient;
//# sourceMappingURL=RestClient.js.map