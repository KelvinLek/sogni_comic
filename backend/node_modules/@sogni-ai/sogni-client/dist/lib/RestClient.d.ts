import TypedEventEmitter, { EventMap } from './TypedEventEmitter';
import { JSONValue } from '../types/json';
import { Logger } from './DefaultLogger';
import AuthManager from './AuthManager';
declare class RestClient<E extends EventMap = never> extends TypedEventEmitter<E> {
    readonly baseUrl: string;
    protected _auth: AuthManager;
    protected _logger: Logger;
    constructor(baseUrl: string, auth: AuthManager, logger: Logger);
    get auth(): AuthManager;
    private formatUrl;
    private request;
    private processResponse;
    get<T = JSONValue>(path: string, query?: Record<string, any>): Promise<T>;
    post<T = JSONValue>(path: string, body?: Record<string, unknown>): Promise<T>;
}
export default RestClient;
