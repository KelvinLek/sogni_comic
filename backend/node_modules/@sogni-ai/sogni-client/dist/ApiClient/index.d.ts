import RestClient from '../lib/RestClient';
import WebSocketClient from './WebSocketClient';
import TypedEventEmitter from '../lib/TypedEventEmitter';
import { ApiClientEvents } from './events';
import { ServerConnectData, ServerDisconnectData } from './WebSocketClient/events';
import { JSONValue } from '../types/json';
import { SupernetType } from './WebSocketClient/types';
import { Logger } from '../lib/DefaultLogger';
import AuthManager, { Tokens } from '../lib/AuthManager';
export interface ApiResponse<D = JSONValue> {
    status: 'success';
    data: D;
}
/** @inline */
export interface ApiErrorResponse {
    status: 'error';
    message: string;
    errorCode: number;
}
export declare class ApiError extends Error {
    status: number;
    payload: ApiErrorResponse;
    constructor(status: number, payload: ApiErrorResponse);
}
declare class ApiClient extends TypedEventEmitter<ApiClientEvents> {
    readonly appId: string;
    readonly logger: Logger;
    private _rest;
    private _socket;
    private _auth;
    private _reconnectAttempts;
    private _disableSocket;
    constructor(baseUrl: string, socketUrl: string, appId: string, networkType: SupernetType, logger: Logger, disableSocket?: boolean);
    get isAuthenticated(): boolean;
    get auth(): AuthManager;
    get socket(): WebSocketClient;
    get rest(): RestClient;
    get socketEnabled(): boolean;
    authenticate(tokens: Tokens): Promise<void>;
    removeAuth(): void;
    handleSocketConnect({ network }: ServerConnectData): void;
    handleSocketDisconnect(data: ServerDisconnectData): void;
    handleRefreshFailed(): void;
}
export default ApiClient;
