import DataEntity, { EntityEvents } from '../lib/DataEntity';
import ErrorData from '../types/ErrorData';
import { RawJob, RawProject } from './types/RawProject';
import ProjectsApi from './index';
import { Logger } from '../lib/DefaultLogger';
import { EnhancementStrength } from './types';
import Project from './Project';
import { SupernetType } from '../ApiClient/WebSocketClient/types';
import { TokenType } from '../types/token';
export declare const enhancementDefaults: {
    network: SupernetType;
    modelId: string;
    positivePrompt: string;
    negativePrompt: string;
    stylePrompt: string;
    startingImageStrength: number;
    steps: number;
    guidance: number;
    numberOfImages: number;
    numberOfPreviews: number;
};
export type JobStatus = 'pending' | 'initiating' | 'processing' | 'completed' | 'failed' | 'canceled';
/**
 * @inline
 */
export interface JobData {
    id: string;
    projectId: string;
    status: JobStatus;
    step: number;
    stepCount: number;
    workerName?: string;
    seed?: number;
    isNSFW?: boolean;
    userCanceled?: boolean;
    previewUrl?: string;
    resultUrl?: string | null;
    error?: ErrorData;
    positivePrompt?: string;
    negativePrompt?: string;
    jobIndex?: number;
}
export interface JobEventMap extends EntityEvents {
    progress: number;
    completed: string;
    failed: ErrorData;
}
export interface JobOptions {
    api: ProjectsApi;
    logger: Logger;
    project: Project;
}
declare class Job extends DataEntity<JobData, JobEventMap> {
    static fromRaw(rawProject: RawProject, rawJob: RawJob, options: JobOptions): Job;
    private readonly _api;
    private readonly _logger;
    private readonly _project;
    private _enhancementProject;
    constructor(data: JobData, options: JobOptions);
    get id(): string;
    get projectId(): string;
    /**
     * Current status of the job.
     */
    get status(): JobStatus;
    get finished(): boolean;
    /**
     * Progress of the job in percentage (0-100).
     */
    get progress(): number;
    /**
     * Current step of the job.
     */
    get step(): number;
    /**
     * Total number of steps that worker will perform.
     */
    get stepCount(): number;
    /**
     * Seed used to generate the image. This property is only available when the job is completed.
     */
    get seed(): number | undefined;
    /**
     * Last preview image URL generated by the worker.
     */
    get previewUrl(): string | undefined;
    /**
     * URL to the result image, could be null if the job was canceled or triggered NSFW filter while
     * it was not disabled explicitly.
     */
    get resultUrl(): string | null | undefined;
    get imageUrl(): string | undefined;
    get error(): ErrorData | undefined;
    get hasResultImage(): boolean;
    get enhancedImage(): {
        status: import("./Project").ProjectStatus;
        progress: number;
        result: string | null;
        error: ErrorData | undefined;
        getResultUrl: () => Promise<string>;
    } | null;
    /**
     * Get the result URL of the job. This method will make a request to the API to get signed URL.
     * IMPORTANT: URL expires after 30 minutes, so make sure to download the image as soon as possible.
     */
    getResultUrl(): Promise<string>;
    /**
     * Whether the image is NSFW or not. Only makes sense if job is completed.
     * If NSFW filter is disabled, this property will always be false.
     * If NSFW filter is enabled and the image is NSFW, image will not be available for download.
     */
    get isNSFW(): boolean;
    /**
     * Name of the worker that is processing this job.
     */
    get workerName(): string | undefined;
    /**
     * Syncs the job data with the data received from the REST API.
     * @internal
     * @param data
     */
    _syncWithRestData(data: RawJob): Promise<void>;
    private handleUpdated;
    private handleEnhancementUpdate;
    getResultData(): Promise<import("buffer").Blob>;
    /**
     * Enhance the image using the Flux model. This method will create a new project with the
     * enhancement parameters and use the result image of the current job as the starting image.
     * @param strength - how much freedom the model has to change the image.
     * @param overrides - optional parameters to override original prompt, style or token type.
     */
    enhance(strength: EnhancementStrength, overrides?: {
        positivePrompt?: string;
        stylePrompt?: string;
        tokenType?: TokenType;
    }): Promise<string>;
}
export default Job;
